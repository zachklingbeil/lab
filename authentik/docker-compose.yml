services:
    server:
        image: ghcr.io/goauthentik/server
        restart: unless-stopped
        container_name: authentik
        command: server
        environment:
            AUTHENTIK_SECRET_KEY: ${AUTHENTIK_KEY:?secret key required}
            AUTHENTIK_POSTGRESQL__HOST: postgres
            AUTHENTIK_POSTGRESQL__USER: postgres
            AUTHENTIK_POSTGRESQL__NAME: authentik
            AUTHENTIK_POSTGRESQL__PASSWORD: ${PASSWORD}
            AUTHENTIK_REDIS__HOST: redis
            AUTHENTIK_REDIS__PASSWORD: ${PASSWORD}
            AUTHENTIK_REDIS__DB: 2
            AUTHENTIK_ERROR_REPORTING__ENABLED: true
        volumes:
            - authentik:/authentik
        networks:
            - timefactory
        labels:
            - traefik.enable=true
            - traefik.http.routers.authentik.rule=Host(`auth.timefactory.io`)
            - traefik.http.routers.authentik.entrypoints=websecure
            - traefik.http.routers.authentik.tls=true
            - traefik.http.routers.authentik.tls.certresolver=myresolver
            - traefik.http.services.authentik.loadbalancer.server.port=9000
    worker:
        image: ghcr.io/goauthentik/server
        restart: unless-stopped
        command: worker
        environment:
            AUTHENTIK_SECRET_KEY: ${AUTHENTIK_KEY:?secret key required}
            AUTHENTIK_REDIS__HOST: redis
            AUTHENTIK_REDIS__PASSWORD: ${PASSWORD}
            AUTHENTIK_REDIS__DB: 2
            AUTHENTIK_POSTGRESQL__HOST: postgres
            AUTHENTIK_POSTGRESQL__USER: postgres
            AUTHENTIK_POSTGRESQL__NAME: authentik
            AUTHENTIK_POSTGRESQL__PASSWORD: ${PASSWORD}
        user: root
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - timefactory
networks:
    timefactory:
        external: true

volumes:
    authentik:
        external: true
